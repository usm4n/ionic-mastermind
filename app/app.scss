// http://ionicframework.com/docs/v2/theming/


// App Global Sass
// --------------------------------------------------
// Put style rules here that you want to apply globally. These
// styles are for the entire app and not just one component.
// Additionally, this file can be also used as an entry point
// to import other Sass files to be included in the output CSS.
//
// Shared Sass variables, which can be used to adjust Ionic's
// default Sass variables, belong in "theme/variables.scss".
//
// To declare rules for a specific mode, create a child rule
// for the .md, .ios, or .wp mode classes. The mode class is
// automatically applied to the <body> element in the app.
@mixin theme($color-map) {
    $black: map-get($color-map, black);
    $timer-bg: map-get($color-map, green);
    $light-bg: map-get($color-map, light);
    $main-bg: map-get($color-map, 'background');
    $main-fg: map-get($color-map, 'foreground');
    $control-bg: map-get($color-map, 'control-bg');
    $game-wraper: map-get($color-map, 'game-wraper');

    main-scene {
        .main-bg {
            background-color: $main-bg;
        }
        .button-reset {
            border-radius: 5px;
            background-color: $control-bg;
            font-size: 1.8em;
            color: $main-fg;
            text-align: center;
        }
        .game-wraper {
            padding: 0;
            background-color: $game-wraper;
            border: 5px solid $game-wraper;
            border-radius: 3px;
        }
        .row-inactive .col, .result-col.inactive {
            background-color: $main-fg;
            border: 2px solid $game-wraper;
            border-radius: 5px;
            padding: 3px;
        }
        .row-active .col:not(.result-col), .result-col.active {
            background-color: $light-bg;
            border: 2px solid $game-wraper;
            border-radius: 5px;
            padding: 3px;
            transition: background-color .1s ease-out;
        }
        .color-chooser .col, .hidden-sequence .col {
            background-color: $control-bg;
        }
        .hidden-sequence .slot {
            background-color: $game-wraper;
            color: $main-fg;
            font-weight: bold;
            line-height: 30px;
        }
        .result-col {
            &.inactive {
                .match {
                    height: 15px;
                    border-radius: 50%;
                    background-color: $main-fg;
                    border: 2px solid $game-wraper;
                }
            }
            &.active {
                .match {
                    height: 15px;
                    border-radius: 50%;
                    background-color: $main-bg;
                    border: 2px solid $game-wraper;
                    &.grey {
                        background-color: $main-fg;
                    }
                    &.black {
                        background-color: $black;
                    }
                }
            }
        }
        @each $color-name in (orange yellow green cyan blue magenta pink grey red black) {
            .#{$color-name} {
                background-color: map-get($color-map, $color-name);
            }
        }
    }

    ion-modal {
        &.show-page {
            opacity: .85;
        }
        .menu-content {
            background-color: $main-bg;
        }
    }

    .game-control {
        display: block;
        background-color: #928374;
        border-radius: 3px;
        color: #f9f5d7;
        padding: 4px 5px;
        box-shadow: 0 3px 0 #ebdbb2, 0 -1px #f9f5d7 inset;
    }

    .timer {
        background-color: $timer-bg;
        padding: 4px 5px;
        color: $main-bg;
        border-radius: 3px;
        .badge {
            background-color: $main-bg;
            color: $main-fg;
            padding: 0 5px;
            border-radius: 3px;
        }
    }

    .overlay-message {
        position: fixed;
        width: 100%;
        height: 100%;
        background: rgba(50, 48, 47, 0.85);
        z-index: 20;
        top: 0;
        left: 0;
    }
}

@each $color-map in (default alternate) {
    .#{$color-map} {
        @include theme(map-get($themes, $color-map));
    }
}

